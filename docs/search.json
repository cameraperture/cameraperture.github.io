[
  {
    "objectID": "olympics.html",
    "href": "olympics.html",
    "title": "Olympics",
    "section": "",
    "text": "Data for this analysis was accessed from https://github.com/rfordatascience/tidytuesday/tree/master/data/2021/2021-07-27 . Data was scraped from www.sports-reference.com in May 2018 and contains historical Olympics data from Athens 1896 to Rio 2016.\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nolympics &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-27/olympics.csv')\n\n\nggplot(olympics, aes(x=year, y=age))+\n  geom_point(aes(color=sex))+\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nggplot(olympics, aes(x=age))+\n  geom_histogram(aes(fill=sex))+\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nolympics_nona &lt;- olympics[!is.na(olympics$age), ]\nolympics_meanage&lt;-olympics_nona%&gt;%\n  group_by(year)%&gt;%\n  summarize(avg_age=(mean(age)))\n\n\nggplot(olympics_meanage, aes(x=year, y=avg_age)) +\n  geom_point(shape=16, size=2, color=\"goldenrod4\") +\n  geom_smooth(color=\"#90EE90\", fill=\"#90EE90\", se=FALSE)+\n  theme_minimal()+\n  labs(title = \"Mean Age of Athletes at the Olympics\",\n       subtitle = \"1896 to 2016\",\n       x=\"Olympic Year\",\n       y=\"Mean Age\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Charlotte Imbert",
    "section": "",
    "text": "Welcome! My name is Charlotte Imbert and I’m an undergraduate student at Pomona College. I am majoring in Neuroscience with a minor in Math. I love Statistics and ML and am currently working on a research project aiming to predict cognitive function from neuroimaging (fMRI) data.\nWhen I’m not studying or doing research, I love to play pickleball and perform stand-up comedy. Additionally, I love Daft Punk, Taylor Swift, cheese, and visiting National Parks. I am a French and British dual citizen, and I speak fluent French, Spanish and Portuguese."
  },
  {
    "objectID": "premierleague.html",
    "href": "premierleague.html",
    "title": "Premier League Soccer",
    "section": "",
    "text": "The data for this analysis was accessed via https://github.com/rfordatascience/tidytuesday/tree/master/data/2023/2023-04-04 . The data is from the Premier League Match Data 2021-2022 via Evan Gower on Kaggle. The dataset contains information about soccer matches in the 2021-2022 English Premier League season.\n\nlibrary(tidytuesdayR)\nlibrary(tidyverse)\nsoccer &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-04/soccer21-22.csv')\n\n\nsoccer_summary&lt;-soccer%&gt;%\n  group_by(HomeTeam)%&gt;%\n  summarize(totalfouls=sum(HF))%&gt;%\n  arrange(desc(totalfouls))\n\n\nplot&lt;-ggplot(soccer_summary, aes(x=reorder(HomeTeam, totalfouls), y=totalfouls))+\n  geom_bar(stat = \"identity\", aes(fill = ifelse(HomeTeam %in% c(\"Burnley\", \"Norwich\", \"Watford\"), \"Relegated\", \"Safe\"))) +\n  scale_fill_manual(values = c(\"Relegated\" = \"navyblue\", \"Safe\" = \"lightblue\")) +\n  theme_minimal()+\n  labs(title=\"Premier League Fouls by Team, 2021-2022\",\n       subtitle=\"Home Games\",\n       y=\"Total Number of Fouls\",\n       x=\"Team\",\n       fill=\"Relegation Status\")\nplot+coord_flip()\n\n\n\n\n\n\n\n\n\nsoccer_summary2&lt;-soccer%&gt;%\n  group_by(AwayTeam)%&gt;%\n  summarize(totalfouls_a=sum(AF))%&gt;%\n  arrange(desc(totalfouls_a))\n\n\nplot2&lt;-ggplot(soccer_summary2, aes(x=reorder(AwayTeam, totalfouls_a), y=totalfouls_a))+\n  geom_bar(stat = \"identity\", aes(fill = ifelse(AwayTeam %in% c(\"Burnley\", \"Norwich\", \"Watford\"), \"Relegated\", \"Safe\"))) +\n  scale_fill_manual(values = c(\"Relegated\" = \"red\", \"Safe\" = \"lightpink\")) +\n  theme_minimal()+\n  labs(title=\"Premier League Fouls by Team, 2021-2022\",\n       subtitle=\"Away Games\",\n       y=\"Total Number of Fouls\",\n       x=\"Team\",\n       fill=\"Relegation Status\")\nplot2+coord_flip()"
  },
  {
    "objectID": "shakespeare.html",
    "href": "shakespeare.html",
    "title": "Shakespeare",
    "section": "",
    "text": "Data was accessed from https://github.com/rfordatascience/tidytuesday/tree/master/data/2024/2024-09-17 . The dataset is from shakespeare.mit.edu (via github.com/nrennie/shakespeare). Some of the code below is taken from Deepali Kank on GitHub, https://github.com/deepdk/TidyTuesday2024/tree/main/2024/week_38 .\nlibrary(tidyverse)\nhamlet &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/hamlet.csv')\nmacbeth &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/macbeth.csv')\nromeo_juliet &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-09-17/romeo_juliet.csv')\nlibrary(scales)\nlibrary(tidytext)\nlibrary(devtools)\nlibrary(ggwordcloud)\nlibrary(png)\nlibrary(svglite)"
  },
  {
    "objectID": "shakespeare.html#romeo-juliet",
    "href": "shakespeare.html#romeo-juliet",
    "title": "Shakespeare",
    "section": "Romeo & Juliet",
    "text": "Romeo & Juliet\n\nromeo_juliet&lt;-romeo_juliet%&gt;%\n  filter(character %in% c(\"Romeo\", \"Juliet\"))\n\nWe need to remove stop words:\n\ncustom_stop_words &lt;- c(\"thou\", \"thy\", \"thee\", \"thine\", \"art\", \"hast\", \"doth\", \"dost\", \"ere\", \"o\",\"hath\")\n\n\ntemp1 &lt;- romeo_juliet %&gt;%\n  unnest_tokens(word, dialogue) %&gt;%\n  anti_join(stop_words)%&gt;%\n  filter(!str_detect(word, \"^[0-9]+$\"))\n\nJoining with `by = join_by(word)`\n\ntemp2 &lt;- romeo_juliet %&gt;%\n  unnest_tokens(word, dialogue)%&gt;%\n  filter(!word %in% stop_words$word)%&gt;%\n  filter(!str_detect(word, \"^[0-9]+$\"))\n\n\nword_counts &lt;- romeo_juliet %&gt;%\n  unnest_tokens(word, dialogue) %&gt;%\n  anti_join(stop_words) %&gt;%\n  filter(!str_detect(word, \"^[0-9]+$\")) %&gt;% #remove any word, and a full number. ^ is beginning of string, + means one or more, and $ is end of string\n  filter(!word %in% custom_stop_words) %&gt;%\n  mutate(word=stringr::str_replace(word, \"'s\", \"\"))%&gt;%\n  count(character, word, sort = TRUE)\n\nJoining with `by = join_by(word)`\n\n\n\njuliet &lt;- word_counts |&gt; \n  filter(character == \"Juliet\")\n\n\nromeo &lt;- word_counts |&gt; \n  filter(character == \"Romeo\")\n\nMaking a word cloud for each character:\n\nromeo %&gt;%\n  filter(n&gt;1)%&gt;%\n  ggplot(aes(label=word, size=n, color=n))+\n  geom_text_wordcloud(rm_outside = TRUE, shape=\"cardioid\")+\n  scale_size_area(max_size = 15) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#FF69B4\", high = \"#C41E3A\")\n\nWarning in wordcloud_boxes(data_points = points_valid_first, boxes = boxes, :\nSome words could not fit on page. They have been removed.\n\n\n\n\n\n\n\n\n\n\np1_ro &lt;- ggplot(\n  romeo,\n  aes(\n    label = word, size = n,color = n\n  )\n) +\n  geom_text_wordcloud_area(\n    mask = readPNG(\"/Users/charlotteimbert/Desktop/git/cameraperture.github.io/AlphaShakespeare.png\"),\n    rm_outside = TRUE\n  ) +\n  scale_size_area(max_size = 20) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#FF69B4\", high = \"#C41E3A\")\n\nprint(p1_ro)\n\nWarning in wordcloud_boxes(data_points = points_valid_first, boxes = boxes, :\nSome words could not fit on page. They have been removed.\n\n\n\n\n\n\n\n\n\n\np1_ju &lt;- ggplot(\n  juliet,\n  aes(\n    label = word, size = n,color = n\n  )\n) +\n  geom_text_wordcloud_area(\n    mask = readPNG(\"/Users/charlotteimbert/Desktop/git/cameraperture.github.io/AlphaShakespeare.png\"),\n    rm_outside = TRUE\n  ) +\n  scale_size_area(max_size = 20) +\n  theme_minimal() +\n  scale_color_gradient(low = \"#FF69B4\", high = \"#C41E3A\")\n\nprint(p1_ju)\n\nWarning in wordcloud_boxes(data_points = points_valid_first, boxes = boxes, :\nSome words could not fit on page. They have been removed."
  }
]